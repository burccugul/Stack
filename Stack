import java.util.EmptyStackException;

public class Stack {
	
	private ListNode top;
	private int length;
	
	private class ListNode{
		
		private int data;
		private ListNode next;
		
		public ListNode(int data) {
			this.data = data;
		}
	}
	
	public Stack() {
		top = null;
		length = 0;
	}
	
	public boolean isEmpty() {
		return length == 0;
	}
	
	public void push(int data) {
		
		ListNode temp = new ListNode(data);
		temp.next = top;
		top = temp;
		length++;
	}
	
	public int pop() {
		
		if(top == null) {
			throw new EmptyStackException();
		}else {
		int temp = top.data;
		top = top.next;
		length--;
		return temp;
		}
	}
	
	public int peek() {
		if(top == null) {
			throw new EmptyStackException();
		}
		return top.data;
	}
	
	public static String reverse(String str) {
		
		Stack stack = new Stack();
		char [] charArray = str.toCharArray();
		
		for(char c : charArray) {
			stack.push(c);
		}
		
		for(int i = 0; i<str.length(); i++){
			charArray[i] = (char) stack.pop();
		}
		return new String(charArray);
		
	}
	
	
	public static int [] findNextGreater(int [] arr ) {
		
		int [] result = new int [arr.length];
		Stack stack = new Stack();
		
		for(int i = arr.length-1; i >= 0; i--) {
			if(!stack.isEmpty()) {
				while(!stack.isEmpty() && stack.peek()  <= arr[i]) {
					stack.pop();
				}
			}
			if(stack.isEmpty()) {
				result [i] = -1;
			}
			else {
				result[i] = stack.peek();
			}
			stack.push(arr[i]);
		}
		return result;
	}
	
	public static boolean isValid(String s) {
		
		Stack stack = new Stack();
		
		for( char c : s.toCharArray()) {
			if(c == '(' || c == '['	|| c == '{') {
				stack.push(c);
			}else {
				if(stack.isEmpty()) {
					return false;
				}else {
					char top = (char) stack.peek();
					if( ( c == ')' && top == '(') || 
						( c == '}' && top == '{') ||
						( c == ']' && top == '[') ) {
						stack.pop();
					}
					else {
						return false;
					}
				}
			}
		}
		return stack.isEmpty();
	}

	public static void main(String[] args) {

		Stack stack = new Stack();
		stack.push(3);
		stack.push(7);
		stack.push(10);

		System.out.println(stack.peek());
		
		stack.pop();
		System.out.println(stack.peek());
		
		String str = "ABCD";
		System.out.println("Before reverse " + str);
		System.out.println("After reverse " + reverse(str));
		
		int [] arr = {4,7,3,4,8,1};
		int [] result = findNextGreater(arr);
		for(int n : result) {
			System.out.print(n + " ");
		}
		
		System.out.println("");
		System.out.println(isValid("[(}"));
		System.out.println(isValid("[()]"));


	}

}
